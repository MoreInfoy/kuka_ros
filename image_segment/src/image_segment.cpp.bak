#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>

#include <opencv4/opencv2/core/core.hpp>
#include <opencv4/opencv2/highgui/highgui.hpp>

#include <pcl/visualization/cloud_viewer.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

using namespace std;
using namespace cv;

#define RGB_W "RGB_Image_Viewer"
#define DEPTH_W "DEPTH_IMAGE_Viewer"
#define Point_W "Point_Cloud_Viewer"
#define SUBSCRIBE_TOPIC_RGB "/kinect2/rgb"
#define SUBSCRIBE_TOPIC_DEPTH "/kinect2/depth"

typedef pcl::PointXYZRGBA PointT;
typedef pcl::PointCloud<PointT> PointCloud;

const double camera_factor = 1000;
const double camera_cx = 2.5112554384458201e+02;
const double camera_cy = 2.0892659564799263e+02;
const double fx = 3.8391574606192086e+02;
const double fy = 3.8488540509632492e+02;
//pcl::visualization::CloudViewer viewer("Cloud Viewer");

class Cloud
{
public:
    Cloud(ros::NodeHandle nh) : data(new PointCloud)
    {
        namedWindow(RGB_W, WINDOW_AUTOSIZE);
        namedWindow(DEPTH_W, WINDOW_AUTOSIZE);
        // namedWindow("threshold", WINDOW_AUTOSIZE);
        // namedWindow("grayImage", WINDOW_AUTOSIZE);
        startWindowThread();

        image_transport::ImageTransport it(nh);
        image_transport::Subscriber sub_rgb = it.subscribe(SUBSCRIBE_TOPIC_RGB, 1, rgb_callback);
        image_transport::Subscriber sub_depth = it.subscribe(SUBSCRIBE_TOPIC_DEPTH, 1, depth_callback);
    }
    ~Cloud()
    {
        data->points.clear();
    }

private:
    Mat rgb, depth;
    PointCloud::Ptr data;
    int rgb_callback(const sensor_msgs::ImageConstPtr &msg)
    {
        try
        {
            Rect rect(720, 320, 300, 300);
            RGB = cv_bridge::toCvShare(msg, msg->encoding)->image;
            // sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), "32FC1", image).toImageMsg();
            // std::cout << image << std::endl;
            // Mat dst;
            // image.convertTo(dst, CV_32FC1);
            // Mat BGR;
            // cvtColor(RGB, BGR, COLOR_RGB2BGR);
            imshow(RGB_W, RGB);
            // imwrite("/home/nimpng/gbr.png", RGB);

            // rectangle(image, rect, Scalar(0, 0, 255), 2, 8, 0);
            // Mat _gray_image, _threshold_image, dst;
            // try
            // {
            //     cvtColor(image, _gray_image, CV_BGR2GRAY);
            // }
            // catch (Exception &e)
            // {
            //     std::cout << e.msg.c_str() << std::endl;
            // }

            // // equalizeHist(_gray_image, _gray_image);
            // threshold(_gray_image, _threshold_image, 190, 255, CV_THRESH_BINARY);
            // int s = 5;
            // Mat structureElement = getStructuringElement(MORPH_RECT, Size(s, s), Point(-1, -1));
            // dilate(_threshold_image, dst, structureElement, Point(-1, -1));
            // dst -= _threshold_image;
            // int cols = image.cols;
            // int rows = image.rows;

            // for (int i = 0; i < rows; i++)
            // {
            //     for (int j = 0; j < cols; j++)
            //     {
            //         if (dst.at<uchar>(i, j) == 255)
            //             image.at<Vec3b>(i, j)[0] = 0;
            //     }
            // }
            // imshow("img", dst);
            // imshow("threshold", _threshold_image);
            // imshow("grayImage", _gray_image);
        }
        catch (cv_bridge::Exception &e)
        {
            ROS_ERROR("this %s", e.what());
        }
        return 0;
    }

    int depth_callback(const sensor_msgs::ImageConstPtr &msg)
    {
        try
        {
            DEPTH = cv_bridge::toCvShare(msg, msg->encoding)->image;
            if (RGB.empty() || DEPTH.empty())
                return 0;

            imshow(DEPTH_W, DEPTH / 4500.0f);
            imwrite("/home/nimpng/depth.tiff", DEPTH);

            //         for (int m = 0; m < DEPTH.rows; m++)
            //         {
            //             for (int n = 0; n < DEPTH.cols; n++)
            //             {
            // //                std::cout << m << ", " << n << std::endl;
            //                 ushort d = DEPTH.ptr<ushort>(m)[n];
            //                 if (0 == d)
            //                     continue;
            //                 PointT p;
            //                 p.z = double(d) / camera_factor;
            //                 p.x = (n - camera_cx) * p.z / fx;
            //                 p.y = (m - camera_cy) * p.z / fy;

            //                 p.r = RGB.ptr<uchar>(m)[n * 3];
            //                 p.g = RGB.ptr<uchar>(m)[n * 3 + 1];
            //                 p.b = RGB.ptr<uchar>(m)[n * 3 + 2];
            //                 p.a = 255;

            //                 cloud->points.push_back(p);
            //                 std::cout << cloud->points.size() << std::endl;
            //             }
            //         }
            //         cloud->height = 1;
            //         cloud->width = cloud->points.size();
            //         cloud->is_dense = false;
            //         pcl::io::savePCDFileASCII("/home/nimpng/tets_pcd.txt", *cloud);
            //        viewer.showCloud(cloud);
            //        while (!viewer.wasStopped())
            //        {
            //            std::cout << "this" << std::endl;
            //        }
        }
        catch (cv_bridge::Exception &e)
        {
            ROS_ERROR("this %s", e.what());
        }
        return 0;
    }

    void createCloud(Mat &rgb, Mat &depth, PointCloud::Ptr &cloud)
    {
        for (int m = 0; m < DEPTH.rows; m++)
        {
            for (int n = 0; n < DEPTH.cols; n++)
            {
                ushort d = DEPTH.ptr<ushort>(m)[n];
                if (0 == d)
                    continue;
                PointT p;
                p.z = double(d) / camera_factor;
                p.x = (n - camera_cx) * p.z / fx;
                p.y = (m - camera_cy) * p.z / fy;

                p.r = RGB.ptr<uchar>(m)[n * 3];
                p.g = RGB.ptr<uchar>(m)[n * 3 + 1];
                p.b = RGB.ptr<uchar>(m)[n * 3 + 2];
                p.a = 255;

                cloud->points.push_back(p);
                std::cout << cloud->points.size() << std::endl;
            }
        }
        cloud->height = 1;
        cloud->width = cloud->points.size();
        cloud->is_dense = false;
        pcl::io::savePCDFileASCII("/home/nimpng/tets_pcd.txt", *cloud);
    }
};

Mat RGB, DEPTH;

int main(int argc, char **argv)
{
    ros::init(argc, argv, "image_segment");
    ros::NodeHandle nh;
    Cloud cloud(nh);
    ros::spin();

    destroyAllWindows();
    return 0;
}

// #include <iostream>
// #include <pcl/io/io.h>
// #include <pcl/io/pcd_io.h>
// #include <pcl/point_types.h>
// #include <opencv2/opencv.hpp>
// #include <string>
// #include <opencv2/core/core.hpp>
// #include <opencv2/highgui/highgui.hpp>
// #include <pcl/visualization/cloud_viewer.h>

// using namespace std;
// // 定义点云类型
// typedef pcl::PointXYZRGBA PointT;
// typedef pcl::PointCloud<PointT> PointCloud;

// // 相机内参
// const double camera_factor = 1;
// const double camera_cx = 960.5;
// const double camera_cy = 540.5;
// const double camera_fx = 1662.7;
// const double camera_fy = 1662.7;
// // 主函数

// // const double camera_factor = 1000;
// // const double camera_cx = 960.5;
// // const double camera_cy = 540.5;
// // const double fx = 1662.7;
// // const double fy = 1662.7;

// int main(int argc, char **argv)
// {
//     // 读取./data/rgb.png和./data/depth.png，并转化为点云

//     // 图像矩阵
//     cv::Mat rgb, depth;
//     // 使用cv::imread()来读取图像
//     // API: http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html?highlight=imread#cv2.imread
//     rgb = cv::imread("/home/nimpng/gbr.png", cv::IMREAD_UNCHANGED);
//     cout << "read rgb" << endl;
//     // rgb 图像是8UC3的彩色图像
//     // depth 是16UC1的单通道图像，注意flags设置-1,表示读取原始数据不做任何修改
//     depth = cv::imread("/home/nimpng/depth.tiff", cv::IMREAD_UNCHANGED);
//     // cv::namedWindow("depth", cv::WINDOW_NORMAL);
//     // imshow("depth", depth);
//     cout << "read depth" << endl;
//     // cout << depth << endl;
//     // 点云变量
//     // 使用智能指针，创建一个空点云。这种指针用完会自动释放。
//     PointCloud::Ptr cloud(new PointCloud);
//     // 遍历深度图
//     for (int m = 0; m < depth.rows; m++)
//         for (int n = 0; n < depth.cols; n++)
//         {
//             // 获取深度图中(m,n)处的值
//             float d = depth.ptr<float>(m)[n];
//             // d 可能没有值，若如此，跳过此点
//             if (d == 0)
//                 continue;
//             // d 存在值，则向点云增加一个点
//             PointT p;

//             // 计算这个点的空间坐标
//             p.z = double(d) / camera_factor;
//             p.x = (n - camera_cx) * p.z / camera_fx;
//             p.y = (m - camera_cy) * p.z / camera_fy;

//             // 从rgb图像中获取它的颜色
//             // rgb是三通道的BGR格式图，所以按下面的顺序获取颜色
//             p.b = rgb.ptr<uchar>(m)[n * 3];
//             p.g = rgb.ptr<uchar>(m)[n * 3 + 1];
//             p.r = rgb.ptr<uchar>(m)[n * 3 + 2];
//             p.a = 255;
//             // 把p加入到点云中
//             cloud->points.push_back(p);
//             //cout << cloud->points.size() << endl;
//         }
//     // 设置并保存点云
//     cloud->height = 1;
//     cloud->width = cloud->points.size();
//     cout << "point cloud size = " << cloud->points.size() << endl;
//     cloud->is_dense = false;
//     try
//     {
//         //保存点云图
//         pcl::io::savePCDFile("/home/nimpng/pcd.txt", *cloud);
//     }
//     catch (pcl::IOException &e)
//     {
//         cout << e.what() << endl;
//     }
//     //显示点云图
//     pcl::visualization::CloudViewer viewer("Simple Cloud Viewer"); //直接创造一个显示窗口
//     viewer.showCloud(cloud);                                       //再这个窗口显示点云
//     while (!viewer.wasStopped())
//     {
//     }

//     //pcl::io::savePCDFileASCII("E:\\Visual Studio2013\\projectpointcloud.pcd", *cloud);
//     // 清除数据并退出
//     cloud->points.clear();
//     cout << "Point cloud saved." << endl;
//     return 0;
// }